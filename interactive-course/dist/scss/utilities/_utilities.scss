// Comprehensive Utility Classes Generator
// Modern SASS with automatic class generation

@use 'sass:map';
@use 'sass:string';
@use 'sass:math';
@use 'sass:color';
@use '../variables' as *;
@use '../mixins' as *;

// ========================================
// UTILITY MAPS
// ========================================

// Spacing utilities
$utilities-spacing: map.merge(
  $spacers,
  (
    auto: auto
  )
);

// Color utilities
$utilities-colors: map.merge(
  $theme-colors,
  (
    "white": $white,
    "body": $body-color,
    "muted": $gray-600,
    "black-50": rgba($black, 0.5),
    "white-50": rgba($white, 0.5),
    "reset": inherit
  )
);

// Background colors
$utilities-bg: map.merge(
  $theme-colors,
  (
    "white": $white,
    "transparent": transparent,
    "body": $body-bg
  )
);

// Border colors
$utilities-border: map.merge(
  $theme-colors,
  (
    "white": $white
  )
);

// Display utilities
$utilities-display: (
  none: none,
  inline: inline,
  inline-block: inline-block,
  block: block,
  table: table,
  table-row: table-row,
  table-cell: table-cell,
  flex: flex,
  inline-flex: inline-flex,
  grid: grid,
  inline-grid: inline-grid
);

// Position utilities
$utilities-position: (
  static: static,
  relative: relative,
  absolute: absolute,
  fixed: fixed,
  sticky: sticky
);

// ========================================
// UTILITY CLASS GENERATOR
// ========================================

// Generate spacing utilities
@each $prop, $abbrev in (margin: m, padding: p) {
  @each $size, $length in $utilities-spacing {
    .#{$abbrev}-#{$size} { #{$prop}: $length !important; }
    .#{$abbrev}t-#{$size},
    .#{$abbrev}y-#{$size} { #{$prop}-top: $length !important; }
    .#{$abbrev}r-#{$size},
    .#{$abbrev}x-#{$size} { #{$prop}-right: $length !important; }
    .#{$abbrev}b-#{$size},
    .#{$abbrev}y-#{$size} { #{$prop}-bottom: $length !important; }
    .#{$abbrev}l-#{$size},
    .#{$abbrev}x-#{$size} { #{$prop}-left: $length !important; }
  }
}

// Generate responsive spacing utilities
@each $breakpoint in map.keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop, $abbrev in (margin: m, padding: p) {
      @each $size, $length in $utilities-spacing {
        .#{$abbrev}#{$infix}-#{$size} { #{$prop}: $length !important; }
        .#{$abbrev}t#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} { #{$prop}-top: $length !important; }
        .#{$abbrev}r#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} { #{$prop}-right: $length !important; }
        .#{$abbrev}b#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} { #{$prop}-bottom: $length !important; }
        .#{$abbrev}l#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} { #{$prop}-left: $length !important; }
      }
    }
  }
}

// Generate text color utilities
@each $color, $value in $utilities-colors {
  .text-#{$color} {
    @if $value != inherit {
      --bs-text-opacity: 1;
      color: rgba(#{color.channel($value, "red")}, #{color.channel($value, "green")}, #{color.channel($value, "blue")}, var(--bs-text-opacity)) !important;
    } @else {
      color: inherit !important;
    }
  }
}

// Generate background color utilities
@each $color, $value in $utilities-bg {
  .bg-#{$color} {
    --bs-bg-opacity: 1;
    background-color: rgba(#{color.channel($value, "red")}, #{color.channel($value, "green")}, #{color.channel($value, "blue")}, var(--bs-bg-opacity)) !important;
  }
}

// Generate border utilities
@each $color, $value in $utilities-border {
  .border-#{$color} {
    --bs-border-opacity: 1;
    border-color: rgba(#{color.channel($value, "red")}, #{color.channel($value, "green")}, #{color.channel($value, "blue")}, var(--bs-border-opacity)) !important;
  }
}

// Generate display utilities
@each $breakpoint in map.keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $value in $utilities-display {
      .d#{$infix}-#{$value} { display: $value !important; }
    }
  }
}

// Generate position utilities
@each $position in $utilities-position {
  .position-#{$position} { position: $position !important; }
}

// ========================================
// FLEXBOX UTILITIES
// ========================================

// Flex direction
.flex-row { flex-direction: row !important; }
.flex-column { flex-direction: column !important; }
.flex-row-reverse { flex-direction: row-reverse !important; }
.flex-column-reverse { flex-direction: column-reverse !important; }

// Flex wrap
.flex-wrap { flex-wrap: wrap !important; }
.flex-nowrap { flex-wrap: nowrap !important; }
.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

// Flex grow and shrink
.flex-fill { flex: 1 1 auto !important; }
.flex-grow-0 { flex-grow: 0 !important; }
.flex-grow-1 { flex-grow: 1 !important; }
.flex-shrink-0 { flex-shrink: 0 !important; }
.flex-shrink-1 { flex-shrink: 1 !important; }

// Justify content
.justify-content-start { justify-content: flex-start !important; }
.justify-content-end { justify-content: flex-end !important; }
.justify-content-center { justify-content: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-around { justify-content: space-around !important; }
.justify-content-evenly { justify-content: space-evenly !important; }

// Align items
.align-items-start { align-items: flex-start !important; }
.align-items-end { align-items: flex-end !important; }
.align-items-center { align-items: center !important; }
.align-items-baseline { align-items: baseline !important; }
.align-items-stretch { align-items: stretch !important; }

// Align content
.align-content-start { align-content: flex-start !important; }
.align-content-end { align-content: flex-end !important; }
.align-content-center { align-content: center !important; }
.align-content-between { align-content: space-between !important; }
.align-content-around { align-content: space-around !important; }
.align-content-stretch { align-content: stretch !important; }

// Align self
.align-self-auto { align-self: auto !important; }
.align-self-start { align-self: flex-start !important; }
.align-self-end { align-self: flex-end !important; }
.align-self-center { align-self: center !important; }
.align-self-baseline { align-self: baseline !important; }
.align-self-stretch { align-self: stretch !important; }

// Generate responsive flexbox utilities
@each $breakpoint in map.keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .flex#{$infix}-row { flex-direction: row !important; }
    .flex#{$infix}-column { flex-direction: column !important; }
    .flex#{$infix}-row-reverse { flex-direction: row-reverse !important; }
    .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }

    .flex#{$infix}-wrap { flex-wrap: wrap !important; }
    .flex#{$infix}-nowrap { flex-wrap: nowrap !important; }
    .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }

    .justify-content#{$infix}-start { justify-content: flex-start !important; }
    .justify-content#{$infix}-end { justify-content: flex-end !important; }
    .justify-content#{$infix}-center { justify-content: center !important; }
    .justify-content#{$infix}-between { justify-content: space-between !important; }
    .justify-content#{$infix}-around { justify-content: space-around !important; }
    .justify-content#{$infix}-evenly { justify-content: space-evenly !important; }

    .align-items#{$infix}-start { align-items: flex-start !important; }
    .align-items#{$infix}-end { align-items: flex-end !important; }
    .align-items#{$infix}-center { align-items: center !important; }
    .align-items#{$infix}-baseline { align-items: baseline !important; }
    .align-items#{$infix}-stretch { align-items: stretch !important; }
  }
}

// ========================================
// SIZING UTILITIES
// ========================================

// Width utilities
.w-25 { width: 25% !important; }
.w-50 { width: 50% !important; }
.w-75 { width: 75% !important; }
.w-100 { width: 100% !important; }
.w-auto { width: auto !important; }

// Max width utilities
.mw-100 { max-width: 100% !important; }

// Height utilities
.h-25 { height: 25% !important; }
.h-50 { height: 50% !important; }
.h-75 { height: 75% !important; }
.h-100 { height: 100% !important; }
.h-auto { height: auto !important; }

// Max height utilities
.mh-100 { max-height: 100% !important; }

// Viewport sizing
.min-vw-100 { min-width: 100vw !important; }
.min-vh-100 { min-height: 100vh !important; }
.vw-100 { width: 100vw !important; }
.vh-100 { height: 100vh !important; }

// ========================================
// TYPOGRAPHY UTILITIES
// ========================================

// Font size utilities
@each $size, $value in $font-sizes {
  .fs-#{$size} {
    font-size: $value !important;
  }
}

// Font weight utilities
.fw-light { font-weight: $font-weight-light !important; }
.fw-lighter { font-weight: $font-weight-lighter !important; }
.fw-normal { font-weight: $font-weight-normal !important; }
.fw-bold { font-weight: $font-weight-bold !important; }
.fw-semibold { font-weight: $font-weight-semibold !important; }
.fw-bolder { font-weight: $font-weight-bolder !important; }

// Font style utilities
.fst-italic { font-style: italic !important; }
.fst-normal { font-style: normal !important; }

// Text alignment
.text-start { text-align: left !important; }
.text-end { text-align: right !important; }
.text-center { text-align: center !important; }

// Text decoration
.text-decoration-none { text-decoration: none !important; }
.text-decoration-underline { text-decoration: underline !important; }
.text-decoration-line-through { text-decoration: line-through !important; }

// Text transform
.text-lowercase { text-transform: lowercase !important; }
.text-uppercase { text-transform: uppercase !important; }
.text-capitalize { text-transform: capitalize !important; }

// Text wrapping and overflow
.text-wrap { white-space: normal !important; }
.text-nowrap { white-space: nowrap !important; }
.text-break { word-wrap: break-word !important; word-break: break-word !important; }

// Text truncate
.text-truncate {
  @include text-truncate;
}

// Generate responsive text alignment
@each $breakpoint in map.keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .text#{$infix}-start { text-align: left !important; }
    .text#{$infix}-end { text-align: right !important; }
    .text#{$infix}-center { text-align: center !important; }
  }
}

// ========================================
// BORDER UTILITIES
// ========================================

// Border
.border { border: $border-width solid $border-color !important; }
.border-0 { border: 0 !important; }
.border-top { border-top: $border-width solid $border-color !important; }
.border-top-0 { border-top: 0 !important; }
.border-end { border-right: $border-width solid $border-color !important; }
.border-end-0 { border-right: 0 !important; }
.border-bottom { border-bottom: $border-width solid $border-color !important; }
.border-bottom-0 { border-bottom: 0 !important; }
.border-start { border-left: $border-width solid $border-color !important; }
.border-start-0 { border-left: 0 !important; }

// Border radius
.rounded { border-radius: map.get($border-radius-scale, default) !important; }
.rounded-0 { border-radius: 0 !important; }
.rounded-1 { border-radius: map.get($border-radius-scale, sm) !important; }
.rounded-2 { border-radius: map.get($border-radius-scale, default) !important; }
.rounded-3 { border-radius: map.get($border-radius-scale, lg) !important; }
.rounded-4 { border-radius: map.get($border-radius-scale, xl) !important; }
.rounded-5 { border-radius: map.get($border-radius-scale, 2xl) !important; }
.rounded-circle { border-radius: 50% !important; }
.rounded-pill { border-radius: 9999px !important; }

// Border radius directions
.rounded-top { border-top-left-radius: map.get($border-radius-scale, default) !important; border-top-right-radius: map.get($border-radius-scale, default) !important; }
.rounded-end { border-top-right-radius: map.get($border-radius-scale, default) !important; border-bottom-right-radius: map.get($border-radius-scale, default) !important; }
.rounded-bottom { border-bottom-right-radius: map.get($border-radius-scale, default) !important; border-bottom-left-radius: map.get($border-radius-scale, default) !important; }
.rounded-start { border-top-left-radius: map.get($border-radius-scale, default) !important; border-bottom-left-radius: map.get($border-radius-scale, default) !important; }

// ========================================
// VISIBILITY UTILITIES
// ========================================

.visible { visibility: visible !important; }
.invisible { visibility: hidden !important; }

// ========================================
// OPACITY UTILITIES
// ========================================

@for $i from 0 through 10 {
  .opacity-#{$i * 10} {
    opacity: math.div($i, 10) !important;
  }
}

// ========================================
// SHADOW UTILITIES
// ========================================

.shadow-none { box-shadow: none !important; }
.shadow-sm { box-shadow: $box-shadow-sm !important; }
.shadow { box-shadow: $box-shadow !important; }
.shadow-lg { box-shadow: $box-shadow-lg !important; }

// ========================================
// COURSE-SPECIFIC UTILITIES
// ========================================

// Interactive demo utilities
.demo-container {
  @include demo-container;
}

@each $key, $color in $demo-colors {
  .demo-item-#{$key} {
    @include demo-item($color);
  }
}

// Gradient utilities
@each $color, $value in $theme-colors {
  .bg-gradient-#{$color} {
    @include gradient-bg($value);
  }
}

// Hover effects
.hover-scale {
  @include hover-effect;
}

.hover-scale-sm {
  @include hover-effect(1.05);
}

.hover-scale-lg {
  @include hover-effect(1.1);
}

// Active effects
.active-scale {
  @include active-effect;
}

// Quiz state utilities
.quiz-correct {
  @include quiz-state($quiz-correct);
}

.quiz-incorrect {
  @include quiz-state($quiz-incorrect);
}

.quiz-selected {
  @include quiz-state($quiz-selected);
}

// Code utilities
.code-block {
  @include code-block;
}

.code-inline {
  background-color: rgba($code-bg, 0.1);
  color: $code-color;
  padding: 0.125rem 0.25rem;
  border-radius: map.get($border-radius-scale, sm);
  font-family: $font-family-monospace;
  font-size: 0.9em;
}