// Comprehensive SASS Mixins and Functions for Web Technology I Course
// Modern SASS features with full Bootstrap compatibility

@use 'sass:color';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';
@use 'sass:list';
@use 'sass:meta';
@use 'variables/index' as *;

// ========================================
// UTILITY FUNCTIONS & MIXINS
// ========================================

// Breakpoint mixin for responsive design
@mixin breakpoint($min-width) {
  @media (min-width: $min-width) {
    @content;
  }
}

// Math helper functions
@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@function rem($pixels, $context: 16) {
  @return math.div($pixels, $context) * 1rem;
}

@function em($pixels, $context: 16) {
  @return math.div($pixels, $context) * 1em;
}

@function px($value) {
  @if math.unit($value) == "px" {
    @return $value;
  }
  @return $value * 16px;
}

// String helper functions
@function str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);
  
  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }
  
  @return $string;
}

// Color helper functions
@function tint($color, $percentage) {
  @return color.mix($white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return color.mix($black, $color, $percentage);
}

@function contrast-color($color, $light: $white, $dark: $black, $threshold: 60%) {
  @if color.lightness($color) > $threshold {
    @return $dark;
  } @else {
    @return $light;
  }
}

@function theme-color($key: "primary") {
  @return map.get($theme-colors, $key);
}

@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, $black, $white);
  $level: math.abs($level);
  
  @return color.mix($color-base, $color, $level * 8%);
}

// Breakpoint functions
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map.keys($breakpoints)) {
  $n: list.index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if($n < list.length($breakpoint-names), list.nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map.get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map.get($breakpoints, $name);
  @return if($max and $max > 0, $max - 0.02, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// ========================================
// RESPONSIVE MIXINS
// ========================================

// Media query mixins
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max: breakpoint-max($next, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}

// ========================================
// LAYOUT MIXINS
// ========================================

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-wrap {
  display: flex;
  flex-wrap: wrap;
}

@mixin flex($direction: row, $justify: flex-start, $align: stretch) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin padding-y($value) {
  padding-top: $value;
  padding-bottom: $value;
}

@mixin padding($value...) {
  padding: $value;
}

@mixin padding-bottom($value) {
  padding-bottom: $value;
}

@mixin padding-top($value) {
  padding-top: $value;
}

@mixin margin-bottom($value) {
  margin-bottom: $value;
}

@mixin margin-top($value) {
  margin-top: $value;
}

@mixin margin($value...) {
  margin: $value;
}

@mixin heading-1 {
  font-size: $font-size-4xl;
  font-weight: $font-weight-semibold;
  line-height: $line-height-tight;
  margin-bottom: $spacer;
  color: $text-primary;
}

// Grid utilities
@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: math.div($gutter, 2);
  padding-left: math.div($gutter, 2);
  margin-right: auto;
  margin-left: auto;
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin container-fluid($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: math.div($gutter, 2);
  padding-left: math.div($gutter, 2);
  margin-right: auto;
  margin-left: auto;
}

@mixin container($max-width: 1200px, $gutter: $grid-gutter-width) {
  width: 100%;
  max-width: $max-width;
  padding-right: math.div($gutter, 2);
  padding-left: math.div($gutter, 2);
  margin-right: auto;
  margin-left: auto;
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div(-$gutter, 2);
  margin-left: math.div(-$gutter, 2);
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
  position: relative;
  width: 100%;
  padding-right: math.div($gutter, 2);
  padding-left: math.div($gutter, 2);
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 auto;
  width: math.percentage(math.div($size, $columns));
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, math.percentage($num));
}

// ========================================
// COMPONENT MIXINS
// ========================================

// Button variants
@mixin button-variant(
  $background,
  $border,
  $color: contrast-color($background),
  $hover-background: color.adjust($background, $lightness: -15%),
  $hover-border: color.adjust($border, $lightness: -20%),
  $hover-color: contrast-color($hover-background),
  $active-background: color.adjust($background, $lightness: -20%),
  $active-border: color.adjust($border, $lightness: -25%),
  $active-color: contrast-color($active-background),
  $disabled-background: $background,
  $disabled-border: $border,
  $disabled-color: contrast-color($disabled-background)
) {
  color: $color;
  background-color: $background;
  border-color: $border;
  box-shadow: $btn-box-shadow;

  &:hover {
    color: $hover-color;
    background-color: $hover-background;
    border-color: $hover-border;
  }

  .btn-check:focus + &,
  &:focus {
    color: $hover-color;
    background-color: $hover-background;
    border-color: $hover-border;
    box-shadow: $btn-focus-box-shadow;
  }

  .btn-check:checked + &,
  .btn-check:active + &,
  &:active,
  &.active {
    color: $active-color;
    background-color: $active-background;
    border-color: $active-border;
    box-shadow: $btn-active-box-shadow;

    &:focus {
      box-shadow: $btn-focus-box-shadow;
    }
  }

  &:disabled,
  &.disabled {
    color: $disabled-color;
    background-color: $disabled-background;
    border-color: $disabled-border;
    opacity: $btn-disabled-opacity;
  }
}

@mixin button-outline-variant(
  $color,
  $color-hover: contrast-color($color),
  $active-background: $color,
  $active-border: $color,
  $active-color: contrast-color($active-background)
) {
  color: $color;
  border-color: $color;

  &:hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }

  .btn-check:focus + &,
  &:focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
  }

  .btn-check:checked + &,
  .btn-check:active + &,
  &:active,
  &.active {
    color: $active-color;
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
    }
  }

  &:disabled,
  &.disabled {
    color: $color;
    background-color: transparent;
    opacity: $btn-disabled-opacity;
  }
}

@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  border-radius: $border-radius;
}

// Form control variants
@mixin form-control-focus($ignore-warning: false) {
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    box-shadow: $input-focus-box-shadow;
  }
}

@mixin form-validation-state-selector($state) {
  @if ($state == "valid" or $state == "invalid") {
    .was-validated #{if(&, "&", "")}:#{$state},
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  } @else {
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  }
}

@mixin form-validation-state(
  $state,
  $color,
  $icon,
  $tooltip-color: contrast-color($color),
  $tooltip-bg-color: rgba($color, 0.9),
  $focus-box-shadow: 0 0 0 $input-focus-width rgba($color, 0.25),
  $border-color: $color
) {
  .#{$state}-feedback {
    display: none;
    width: 100%;
    margin-top: math.div($spacing-base, 4);
    font-size: $font-size-sm;
    color: $color;
  }

  .#{$state}-tooltip {
    position: absolute;
    top: 100%;
    z-index: 5;
    display: none;
    max-width: 100%;
    padding: ($spacing-base * 0.5) $spacing-base;
    margin-top: 0.1rem;
    font-size: $font-size-sm;
    line-height: $line-height-base;
    color: $tooltip-color;
    background-color: $tooltip-bg-color;
    border-radius: $border-radius;
  }

  @include form-validation-state-selector($state) {
    ~ .#{$state}-feedback,
    ~ .#{$state}-tooltip {
      display: block;
    }
  }

  .form-control {
    @include form-validation-state-selector($state) {
      border-color: $border-color;

      &:focus {
        border-color: $border-color;
        box-shadow: $focus-box-shadow;
      }
    }
  }
}

// ========================================
// VISUAL MIXINS
// ========================================

// Gradients
@mixin gradient-bg($color: null) {
  background-color: $color;
  @if $color {
    background-image: linear-gradient(180deg, color.mix($white, $color, 15%), $color);
  }
}

@mixin gradient-x($start-color: $gray-700, $end-color: $gray-800, $start-percent: 0%, $end-percent: 100%) {
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
}

@mixin gradient-y($start-color: $gray-700, $end-color: $gray-800, $start-percent: 0%, $end-percent: 100%) {
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
}

@mixin gradient-directional($start-color: $gray-700, $end-color: $gray-800, $deg: 45deg) {
  background-image: linear-gradient($deg, $start-color, $end-color);
}

@mixin gradient-radial($inner-color: $gray-700, $outer-color: $gray-800) {
  background-image: radial-gradient(circle, $inner-color, $outer-color);
}

@mixin gradient-text($start-color, $end-color) {
  background: linear-gradient(135deg, $start-color, $end-color);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

// Box shadows
@mixin box-shadow($shadow...) {
  box-shadow: $shadow;
}

@mixin transition($transition...) {
  @if list.length($transition) == 0 {
    $transition: map.get($animation-duration, base) ease;
  }

  @if list.length($transition) > 1 {
    @each $value in $transition {
      @if $value == null or $value == none {
        @warn "The keyword 'none' or 'null' must be used as a single argument.";
      }
    }
  }

  @if list.nth($transition, 1) != null {
    transition: $transition;
  }

  @if meta.global-variable-exists(prefers-reduced-motion) and $prefers-reduced-motion == reduce {
    @media (prefers-reduced-motion: reduce) {
      transition: none;
    }
  }
}

// Animations
@mixin animation($animation...) {
  animation: $animation;
}

@mixin keyframes($animation-name) {
  @keyframes #{$animation-name} {
    @content;
  }
}

// ========================================
// TYPOGRAPHY MIXINS
// ========================================

@mixin font-size($fs, $lh: $line-height-base) {
  font-size: $fs;
  line-height: $lh;
}

@mixin font-weight($weight) {
  font-weight: map.get($font-weights, $weight);
}

@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-emphasis-variant($parent, $color, $ignore-warning: false) {
  #{$parent} {
    color: $color !important;
  }

  a#{$parent}:hover,
  a#{$parent}:focus {
    color: color.adjust($color, $lightness: -20%) !important;
  }
}

// ========================================
// UTILITY MIXINS
// ========================================

// Clearfix
@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

// Visually hidden
@mixin visually-hidden() {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

@mixin visually-hidden-focusable() {
  &:not(:focus):not(:focus-within) {
    @include visually-hidden();
  }
}

// Reset list
@mixin list-unstyled() {
  padding-left: 0;
  list-style: none;
}

// Image replacement
@mixin img-fluid() {
  max-width: 100%;
  height: auto;
}

// Border radius
@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
  @if $fallback-border-radius != false {
    border-radius: $fallback-border-radius;
  }

  border-radius: $radius;
}

@mixin border-top-radius($radius: $border-radius) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}

@mixin border-end-radius($radius: $border-radius) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}

@mixin border-bottom-radius($radius: $border-radius) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-start-radius($radius: $border-radius) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}

// ========================================
// COURSE-SPECIFIC MIXINS
// ========================================

// Interactive demo styling
@mixin demo-container($bg: $gray-100, $border: $border-color, $radius: $border-radius) {
  background-color: $bg;
  border: 1px solid $border;
  border-radius: $radius;
  padding: $spacing-base;
  margin: $spacing-base 0;
}

@mixin demo-item($color: theme-color("primary"), $size: 60px) {
  background-color: $color;
  color: contrast-color($color);
  width: $size;
  height: $size;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: map.get($border-radius-scale, sm);
  font-weight: $font-weight-bold;
  margin: ($spacing-base * 0.25);
}

// Code block styling
@mixin code-block($bg: $code-bg, $color: $code-color, $radius: $code-border-radius) {
  background-color: $bg;
  color: $color;
  border-radius: $radius;
  padding: $code-padding;
  font-family: $font-family-monospace;
  font-size: $font-size-sm;
  overflow-x: auto;
}

// Interactive states
@mixin hover-effect($scale: $hover-scale, $transition: transform 0.2s ease) {
  transition: $transition;
  
  &:hover {
    transform: scale($scale);
  }
}

@mixin active-effect($scale: $active-scale) {
  &:active {
    transform: scale($scale);
  }
}

// Quiz styling
@mixin quiz-state($color, $bg-color: null, $border-color: null) {
  $bg: if($bg-color, $bg-color, rgba($color, 0.1));
  $border: if($border-color, $border-color, $color);
  
  background-color: $bg;
  border-color: $border;
  color: $color;
}

// Progress indicators
@mixin progress-bar($color: theme-color("primary"), $bg: $progress-bg, $height: $progress-height) {
  background-color: $bg;
  height: $height;
  border-radius: $progress-border-radius;
  overflow: hidden;
  
  .progress-fill {
    background-color: $color;
    height: 100%;
    transition: width 0.3s ease;
  }
}

@function darken-color($color, $amount: 10%) {
  @return color.adjust($color, $lightness: -$amount);
}

@function alpha-color($color, $alpha: 0.5) {
  @return color.change($color, $alpha: $alpha);
}

// Function to generate color from map
@function get-swatch-color($name) {
  @return map.get($swatch-colors, $name);
}

@function get-selector-color($name) {
  @return map.get($selector-colors, $name);
}

// Function to generate focus ring with any color
@function focus-ring($color: theme-color("primary"), $alpha: 0.1) {
  @return 0 0 0 3px alpha-color($color, $alpha);
}

// Media query mixins
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{$breakpoint-sm - 1px}) { @content; }
  }
  @if $breakpoint == sm {
    @media (min-width: #{$breakpoint-sm}) { @content; }
  }
  @if $breakpoint == md {
    @media (min-width: #{$breakpoint-md}) { @content; }
  }
  @if $breakpoint == lg {
    @media (min-width: #{$breakpoint-lg}) { @content; }
  }
  @if $breakpoint == xl {
    @media (min-width: #{$breakpoint-xl}) { @content; }
  }
  @if $breakpoint == xxl {
    @media (min-width: #{$breakpoint-xxl}) { @content; }
  }
}

// Custom breakpoint mixin
@mixin breakpoint($size) {
  @media (max-width: #{$size}) {
    @content;
  }
}

// Flexbox mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-wrap {
  display: flex;
  flex-wrap: wrap;
}

// Grid mixins
@mixin grid-auto-fit($min-width: 250px, $gap: \$spacing-base) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

@mixin grid-auto-fill($min-width: 250px, $gap: \$spacing-base) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $gap;
}

@mixin grid-two-columns($gap: 2rem) {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: $gap;
  align-items: start;
  
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
}

// Card mixins
@mixin card-base {
  background: $bg-primary;
  border-radius: map.get($border-radius-scale, xl);
  box-shadow: $box-shadow-lg;
  padding: $spacing-3xl;
  transition: all map.get($animation-duration, base) ease;
}

@mixin card-hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
}

// Button mixins
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: $spacing-md $spacing-2xl;
  border: none;
  border-radius: map.get($border-radius-scale, md);
  font-weight: $font-weight-semibold;
  font-size: $font-size-sm;
  text-decoration: none;
  cursor: pointer;
  transition: all map.get($animation-duration, base) ease;
  user-select: none;
  
  &:focus {
    outline: none;
    box-shadow: $focus-ring;
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
}

@mixin button-primary {
  @include button-base;
  background: $gradient-primary;
  color: white;
  
  &:hover:not(:disabled) {
    background: linear-gradient(135deg, $primary-hover, $primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(theme-color("primary"), 0.3);
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
}

@mixin button-secondary {
  @include button-base;
  background: $bg-secondary;
  color: $text-primary;
  border: 2px solid $gray-200;
  
  &:hover:not(:disabled) {
    background: $gray-200;
    border-color: theme-color("primary");
    transform: translateY(-2px);
  }
}

@mixin button-outline {
  @include button-base;
  background: transparent;
  color: theme-color("primary");
  border: 2px solid theme-color("primary");
  
  &:hover:not(:disabled) {
    background: theme-color("primary");
    color: white;
    transform: translateY(-2px);
  }
}

@mixin button($size: "md", $variant: "primary") {
  @include button-base;
  
  @if $size == "sm" {
    padding: $btn-padding-y-sm $btn-padding-x-sm;
    font-size: $btn-font-size-sm;
    border-radius: $btn-border-radius-sm;
  } @else if $size == "lg" {
    padding: $btn-padding-y-lg $btn-padding-x-lg;
    font-size: $btn-font-size-lg;
    border-radius: $btn-border-radius-lg;
  } @else {
    padding: $btn-padding-y $btn-padding-x;
    font-size: $btn-font-size;
    border-radius: $btn-border-radius;
  }
  
  @if $variant == "outline" {
    @include button-outline;
  } @else if $variant == "secondary" {
    @include button-secondary;
  } @else if $variant == "ghost" {
    background: transparent;
    border: none;
    color: theme-color("primary");
    
    &:hover:not(:disabled) {
      background: rgba(theme-color("primary"), 0.1);
    }
  } @else {
    @include button-primary;
  }
}

@mixin button-color($color) {
  background: $color;
  border-color: $color;
  color: white;
  
  &:hover:not(:disabled) {
    background: color.adjust($color, $lightness: -10%);
    border-color: color.adjust($color, $lightness: -10%);
  }
}

@mixin button-animation {
  transition: all 0.2s ease-in-out;
  
  &:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
}

@mixin sticky {
  position: sticky;
}

// CSS Demo specific mixins
@mixin demo-swatch($size: 60px) {
  width: $size;
  height: $size;
  border-radius: map.get($border-radius-scale, sm);
  margin: $spacing-sm;
  border: 1px solid $gray-200;
  cursor: pointer;
  transition: all map.get($animation-duration, base) ease;

  &:hover {
    transform: scale(1.05);
    box-shadow: $shadow-md;
  }
}

@mixin selector-input {
  width: 100%;
  padding: $spacing-md;
  border: 2px solid $border-medium;
  border-radius: map.get($border-radius-scale, sm);
  font-family: $font-family-monospace;
  font-size: $font-size-sm;
  margin-bottom: \$spacing-base;

  &:focus {
    outline: none;
    border-color: $css-primary;
    box-shadow: 0 0 0 3px rgba($css-primary, 0.1);
  }
}

@mixin selector-box($size: 60px) {
  width: $size;
  height: $size;
  border-radius: $border-radius-xs;
  border: 1px solid $gray-200;
  transition: all map.get($animation-duration, base) ease;

  &:hover {
    transform: scale(1.05);
  }
}

@mixin demo-button($bg-color: $css-purple, $hover-color: $css-purple-hover) {
  background: $bg-color;
  color: white;
  border: none;
  padding: \$spacing-base $spacing-2xl;
  border-radius: map.get($border-radius-scale, sm);
  cursor: pointer;
  transition: all map.get($animation-duration, base) ease;

  &:hover {
    background: $hover-color;
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  }
}

@mixin color-preview-area {
  background: $css-primary;
  color: white;
  padding: $spacing-5xl;
  border-radius: map.get($border-radius-scale, md);
  text-align: center;
  margin: $spacing-3xl 0;
  transition: all map.get($animation-duration, base) ease;
}

@mixin demo-container {
  display: flex;
  gap: $spacing-2xl;
  flex-wrap: wrap;
  margin: $spacing-3xl 0;
}

// Video card mixins
@mixin video-card {
  background: white;
  border-radius: map.get($border-radius-scale, lg);
  overflow: hidden;
  border: 1px solid $gray-200;
  transition: all map.get($animation-duration, base) ease;

  &:hover {
    .play-overlay {
      background: rgba(30, 64, 175, 0.9);
      transform: translate(-50%, -50%) scale(1.1);
    }

    .video-thumbnail img {
      transform: scale(1.05);
    }
  }
}

@mixin video-thumbnail {
  position: relative;
  aspect-ratio: 16/9;
  overflow: hidden;

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform map.get($animation-duration, base) ease;
  }
}

@mixin play-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(0, 0, 0, 0.8);
  color: white;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: $font-size-xl;
  transition: all map.get($animation-duration, base) ease;
}

// Layout demo mixins
@mixin demo-container {
  padding: $spacing-2xl;
  background: $gray-100;
  border: 2px solid $border-color;
  border-radius: map.get($border-radius-scale, md);
  margin: $spacing-3xl 0;
}

@mixin flex-demo-container($min-height: 120px) {
  @include demo-container;
  display: flex;
  min-height: $min-height;
}

@mixin grid-demo-container($columns: 3, $gap: \$spacing-base) {
  @include demo-container;
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

@mixin demo-item($min-width: 60px, $min-height: 60px) {
  padding: \$spacing-base;
  margin: $spacing-xs;
  border-radius: map.get($border-radius-scale, sm);
  color: white;
  font-weight: $font-weight-semibold;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: $min-width;
  min-height: $min-height;
}

@mixin grid-demo-item($min-height: $demo-grid-min-height) {
  @include demo-item;
  margin: 0;
  min-height: $min-height;
}

// Control group mixin
@mixin control-group {
  background: white;
  padding: $spacing-2xl;
  border-radius: map.get($border-radius-scale, md);
  border: 1px solid $gray-200;

  label {
    display: block;
    margin-bottom: $spacing-sm;
    font-weight: $font-weight-semibold;
    color: $css-primary;
  }

  select {
    width: 100%;
    padding: $spacing-sm;
    border: 1px solid $border-medium;
    border-radius: $border-radius-xs;
    background: white;

    &:focus {
      outline: none;
      border-color: $accent-primary;
      box-shadow: focus-ring($accent-primary);
    }
  }
}

// Device preview mixin
@mixin device-preview {
  border: 2px solid $border-medium;
  border-radius: map.get($border-radius-scale, lg);
  overflow: hidden;
  margin: $spacing-xl 0;

  .device-header {
    background: $bg-secondary;
    padding: $spacing-sm;
    font-size: $font-size-sm;
    color: $text-secondary;
    display: flex;
    align-items: center;
    gap: $spacing-sm;

    &::before {
      content: '●';
      color: $success;
    }
  }

  .device-content {
    padding: $spacing-2xl;
    background: white;
    min-height: 200px;
  }
}

// Form element mixins
@mixin form-input {
  width: 100%;
  padding: $input-padding;
  border: 2px solid $input-border-color;
  border-radius: $input-border-radius;
  font-size: $font-size-base;
  transition: all map.get($animation-duration, base) ease;

  &:focus {
    outline: none;
    border-color: $input-focus-color;
    box-shadow: focus-ring($input-focus-color);
  }

  &:invalid {
    border-color: $danger;
  }

  &:valid {
    border-color: $success;
  }
}

@mixin form-label {
  display: block;
  margin-bottom: $spacing-sm;
  font-weight: $font-weight-semibold;
  color: $text-primary;
}

@mixin form-group {
  margin-bottom: $spacing-xl;
}

@mixin form-help-text {
  font-size: $font-size-sm;
  color: $text-secondary;
  margin-top: $spacing-xs;
}

@mixin form-error-text {
  font-size: $font-size-sm;
  color: $danger;
  margin-top: $spacing-xs;
}

// Table mixins
@mixin table-base {
  width: 100%;
  border-collapse: collapse;
  background: white;
  box-shadow: $shadow-sm;
  border-radius: map.get($border-radius-scale, md);
  overflow: hidden;
}

@mixin table-header {
  background: $table-header-bg;
  color: $table-header-text;

  th {
    padding: \$spacing-base;
    text-align: left;
    font-weight: $font-weight-semibold;
    font-size: $font-size-sm;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
}

@mixin table-body {
  tr {
    border-bottom: 1px solid $table-border-color;
    transition: background-color map.get($animation-duration, base) ease;

    &:hover {
      background: $table-hover-bg;
    }

    &:last-child {
      border-bottom: none;
    }
  }

  td {
    padding: \$spacing-base;
    color: $text-primary;
  }
}

// Timeline mixins
@mixin timeline-container {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    left: $timeline-dot-size / 2;
    top: 0;
    bottom: 0;
    width: 2px;
    background: $timeline-line-color;
  }
}

@mixin timeline-item {
  position: relative;
  padding-left: $spacing-4xl;
  margin-bottom: $spacing-3xl;

  &::before {
    content: '';
    position: absolute;
    left: 0;
    top: $spacing-sm;
    width: $timeline-dot-size;
    height: $timeline-dot-size;
    background: $timeline-dot-color;
    border-radius: 50%;
    border: 3px solid white;
    box-shadow: 0 0 0 3px $timeline-line-color;
  }
}

// Progress bar mixins
@mixin progress-container {
  width: 100%;
  height: $progress-height;
  background: $progress-bg;
  border-radius: $progress-height / 2;
  overflow: hidden;
}

@mixin progress-fill {
  height: 100%;
  background: $progress-fill;
  border-radius: inherit;
  transition: width map.get($transitions, base);
  position: relative;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 2px;
    background: rgba(white, 0.3);
    border-radius: 1px;
  }
}

// Code block mixins
@mixin code-block {
  background: $code-bg;
  color: $code-text;
  padding: $code-padding;
  border-radius: $code-border-radius;
  font-family: $font-family-monospace;
  font-size: $font-size-sm;
  overflow-x: auto;
  margin: \$spacing-base 0;
}

@mixin inline-code {
  background: $gray-200;
  color: $danger;
  padding: $spacing-xs $spacing-sm;
  border-radius: $border-radius-xs;
  font-family: $font-family-monospace;
  font-size: 0.9em;
}

// Hero section mixins
@mixin hero-section {
  background: $hero-gradient;
  color: white;
  padding: $hero-padding;
  text-align: center;
  border-radius: map.get($border-radius-scale, lg);
  margin: $spacing-3xl 0;
}

@mixin hero-title {
  font-size: $font-size-4xl;
  font-weight: $font-weight-bold;
  margin-bottom: \$spacing-base;
  line-height: $line-height-tight;
}

@mixin hero-subtitle {
  font-size: $font-size-xl;
  font-weight: $font-weight-normal;
  opacity: 0.9;
  margin-bottom: $spacing-3xl;
}

// Quiz mixins
@mixin quiz-question {
  background: white;
  border-radius: $card-border-radius;
  padding: $card-padding;
  margin-bottom: $spacing-3xl;
  box-shadow: $card-shadow;
}

@mixin quiz-option {
  padding: \$spacing-base;
  border: 2px solid $gray-200;
  border-radius: map.get($border-radius-scale, md);
  margin-bottom: $spacing-md;
  cursor: pointer;
  transition: all map.get($animation-duration, base) ease;

  &:hover {
    border-color: $accent-primary;
    background: rgba($accent-primary, 0.05);
  }

  &.correct {
    border-color: $quiz-correct-color;
    background: lighten-color($quiz-correct-color, 45%);
    color: darken-color($quiz-correct-color, 20%);
  }

  &.incorrect {
    border-color: $quiz-incorrect-color;
    background: lighten-color($quiz-incorrect-color, 45%);
    color: darken-color($quiz-incorrect-color, 20%);
  }

  &.selected:not(.correct) {
    border-color: $quiz-selected-color;
    background: lighten-color($quiz-selected-color, 40%);
  }
}

// Interactive element mixins
@mixin interactive-hover {
  transition: all map.get($animation-duration, base) ease;
  cursor: pointer;

  &:hover {
    transform: translateY(-2px);
    box-shadow: $shadow-lg;
  }

  &:active {
    transform: translateY(0);
  }
}

@mixin disabled-state {
  opacity: $disabled-opacity;
  cursor: not-allowed;
  pointer-events: none;
}

// Utility mixins for common patterns
@mixin aspect-ratio($ratio: 16/9) {
  aspect-ratio: $ratio;
  overflow: hidden;
}

@mixin text-overflow-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin screen-reader-only {
  position: absolute;
  left: -10000px;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

// Animation mixins
@mixin fade-in($duration: map.get($animation-duration, base)) {
  animation: fadeIn $duration ease-in-out;
}

@mixin slide-up($duration: map.get($animation-duration, base)) {
  animation: slideUp $duration ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from { 
    opacity: 0;
    transform: translateY(30px);
  }
  to { 
    opacity: 1;
    transform: translateY(0);
  }
}

// Input mixins
@mixin input-base {
  padding: \$spacing-base;
  border: 2px solid $gray-200;
  border-radius: map.get($border-radius-scale, md);
  font-size: $font-size-sm;
  transition: border-color map.get($animation-duration, base) ease;
  background: $bg-primary;
  
  &:focus {
    outline: none;
    border-color: theme-color("primary");
    box-shadow: $focus-ring;
  }
  
  &::placeholder {
    color: $text-secondary;
  }
}

// Animation mixins
@mixin fade-in($duration: map.get($animation-duration, base)) {
  opacity: 0;
  animation: fadeIn $duration ease forwards;
}

@mixin slide-in-up($duration: map.get($animation-duration, base), $distance: 20px) {
  opacity: 0;
  transform: translateY($distance);
  animation: slideInUp $duration ease forwards;
}

@mixin slide-in-left($duration: map.get($animation-duration, base), $distance: 20px) {
  opacity: 0;
  transform: translateX(-$distance);
  animation: slideInLeft $duration ease forwards;
}

@mixin pulse($duration: 2s) {
  animation: pulse $duration infinite;
}

@mixin bounce($duration: 1s) {
  animation: bounce $duration infinite;
}

// Text mixins
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-clamp($lines: 3) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Layout mixins
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin full-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

// Utility mixins
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Progress bar mixin
@mixin progress-bar($height: 8px, $bg-color: $gray-200, $fill-color: theme-color("primary")) {
  height: $height;
  background: $bg-color;
  border-radius: map.get($border-radius-scale, sm);
  overflow: hidden;
  position: relative;
  
  .progress-fill {
    height: 100%;
    background: $fill-color;
    border-radius: map.get($border-radius-scale, sm);
    width: 0%;
    transition: width map.get($animation-duration, base) ease;
    position: relative;
    
    &::after {
      content: '';
      @include full-overlay;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      animation: shimmer 2s infinite;
    }
  }
}

// Code block mixin
@mixin code-block {
  background: $bg-dark;
  color: $text-light;
  padding: $spacing-xl;
  border-radius: map.get($border-radius-scale, md);
  font-family: $font-family-monospace;
  font-size: $font-size-sm;
  line-height: $line-height-normal;
  white-space: pre-wrap;
  overflow-x: auto;
  border-left: 4px solid theme-color("primary");
}

// Interactive element mixins
@mixin interactive-hover {
  transition: all map.get($animation-duration, base) ease;
  cursor: pointer;
  
  &:hover {
    transform: translateY(-3px);
    box-shadow: $shadow-lg;
  }
  
  &:active {
    transform: translateY(-1px);
  }
}

@mixin drag-element {
  cursor: grab;
  user-select: none;
  transition: all map.get($animation-duration, base) ease;
  
  &:hover {
    transform: translateY(-3px);
    box-shadow: $shadow-lg;
  }
  
  &:active {
    cursor: grabbing;
    transform: scale($active-scale);
  }
}

// Status indicator mixin
@mixin status-indicator($color) {
  @include flex-center;
  gap: $spacing-sm;
  font-weight: $font-weight-semibold;
  color: $color;
  
  i {
    animation: blink 2s infinite;
  }
}

// Tab mixin
@mixin tab-container {
  @include flex-center;
  gap: $spacing-xs;
  background: $bg-secondary;
  padding: $spacing-xs;
  border-radius: map.get($border-radius-scale, lg);
  
  .tab-button {
    flex: 1;
    padding: $spacing-md $spacing-xl;
    border: none;
    background: transparent;
    border-radius: map.get($border-radius-scale, md);
    cursor: pointer;
    transition: all map.get($animation-duration, base) ease;
    font-weight: $font-weight-semibold;
    color: $text-secondary;
    
    &.active {
      background: theme-color("primary");
      color: white;
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(theme-color("primary"), 0.3);
    }
    
    &:hover:not(.active) {
      background: rgba(theme-color("primary"), 0.1);
      color: theme-color("primary");
    }
  }
}

// Animation mixins
@mixin fade-in-up($duration: 0.5s, $delay: 0s) {
  opacity: 0;
  transform: translateY(20px);
  animation: fadeInUp $duration ease forwards;
  animation-delay: $delay;
}

@mixin slide-in-left($duration: 0.5s, $delay: 0s) {
  opacity: 0;
  transform: translateX(-20px);
  animation: slideInLeft $duration ease forwards;
  animation-delay: $delay;
}

@mixin slide-in-right($duration: 0.5s, $delay: 0s) {
  opacity: 0;
  transform: translateX(20px);
  animation: slideInRight $duration ease forwards;
  animation-delay: $delay;
}

@mixin scale-in($duration: 0.3s, $delay: 0s) {
  opacity: 0;
  transform: scale(0.8);
  animation: scaleIn $duration ease forwards;
  animation-delay: $delay;
}

// Typography and Layout Mixins
@mixin three-column-layout($left: 300px, $center: 1fr, $right: 250px) {
  display: grid;
  grid-template-columns: $left $center $right;
  gap: map.get($spacing-map, 'lg');
}

@mixin sidebar-panel() {
  background: map.get($color-palette, 'gray-50');
  padding: map.get($spacing-map, 'lg');
  border-right: 1px solid map.get($color-palette, 'gray-200');
}

@mixin sidebar-title() {
  color: map.get($color-palette, 'gray-800');
  margin-bottom: map.get($spacing-map, 'md');
  font-size: 1.2rem;
  font-weight: 600;
}

@mixin control-label() {
  display: block;
  color: map.get($color-palette, 'gray-600');
  font-weight: 600;
  margin-bottom: map.get($spacing-map, 'xs');
  font-size: 0.9rem;
}

@mixin range-input() {
  width: 100%;
  height: 6px;
  background: map.get($color-palette, 'gray-200');
  border-radius: 3px;
  outline: none;
  margin-bottom: map.get($spacing-map, 'xs');

  &::-webkit-slider-thumb {
    appearance: none;
    width: 18px;
    height: 18px;
    background: map.get($demo-colors, 'primary');
    border-radius: 50%;
    cursor: pointer;
  }
}

@mixin score-display() {
  text-align: center;
  margin-bottom: map.get($spacing-map, 'lg');
  padding: map.get($spacing-map, 'md');
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

@mixin score-factor() {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: map.get($spacing-map, 'xs');
  margin-bottom: map.get($spacing-map, 'xs');
  background: white;
  border-radius: 8px;
  font-size: 0.9rem;
}

@mixin score-badge() {
  font-weight: 600;
  padding: 0.25rem 0.75rem;
  border-radius: 12px;
  font-size: 0.8rem;
  
  // Note: Dynamic content-based styling would need JavaScript implementation
  // These can be applied via classes instead
}

@mixin badge() {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  font-size: 0.75rem;
  font-weight: 600;
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: 0.25rem;
  border: 1px solid transparent;
}

@mixin control-panel() {
  background: map.get($color-palette, 'gray-50');
  padding: map.get($spacing-map, 'lg');
  border-bottom: 1px solid map.get($color-palette, 'gray-200');
  display: flex;
  gap: map.get($spacing-map, 'lg');
  align-items: end;
  flex-wrap: wrap;
}

@mixin form-label() {
  display: block;
  color: map.get($color-palette, 'gray-600');
  font-weight: 600;
  margin-bottom: map.get($spacing-map, 'xs');
}

@mixin form-select() {
  width: 100%;
  padding: map.get($spacing-map, 'xs');
  border: 2px solid map.get($color-palette, 'gray-200');
  border-radius: $border-radius-base;
  font-size: 1rem;
  background: white;
  transition: all $transition-duration ease;

  &:focus {
    outline: none;
    border-color: map.get($demo-colors, 'primary');
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }
}

@mixin btn-primary() {
  background: map.get($demo-colors, 'primary');
  color: white;
  padding: map.get($spacing-map, 'xs') map.get($spacing-map, 'lg');
  border: none;
  border-radius: $border-radius-base;
  font-weight: 600;
  cursor: pointer;
  transition: all $transition-duration ease;

  &:hover {
    background: color.adjust(map.get($demo-colors, 'primary'), $lightness: -5%);
  }
}

// Additional responsive design mixins
@mixin icon-badge() {
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin btn-outline() {
  background: white;
  color: map.get($demo-colors, 'primary');
  border: 2px solid map.get($demo-colors, 'primary');
  padding: map.get($spacing-map, 'xs') map.get($spacing-map, 'sm');
  border-radius: $border-radius-base;
  font-weight: 600;
  cursor: pointer;
  transition: all $transition-duration ease;

  &:hover {
    background: map.get($demo-colors, 'primary');
    color: white;
  }
}

@mixin code-inline() {
  background: map.get($color-palette, 'gray-100');
  color: map.get($color-palette, 'gray-700');
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-weight: 700;
  font-family: map.get($font-map, 'monospace');
}

@mixin reset-list() {
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin responsive-embed($ratio: 56.25%) {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: $ratio;

  iframe,
  video,
  embed,
  object {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin tab-button() {
  background: white;
  color: map.get($color-palette, 'gray-600');
  border: 2px solid map.get($color-palette, 'gray-300');
  padding: map.get($spacing-map, 'xs') map.get($spacing-map, 'md');
  border-radius: $border-radius-base;
  cursor: pointer;
  transition: all $transition-duration ease;
  font-weight: 600;
}

@mixin tab-button-active() {
  background: map.get($demo-colors, 'primary');
  color: white;
  border-color: map.get($demo-colors, 'primary');
}

@mixin tab-button-hover() {
  border-color: map.get($demo-colors, 'primary');
  background: rgba(map.get($demo-colors, 'primary'), 0.1);
  color: map.get($demo-colors, 'primary');
}

// Additional mixins for HTML topics
@mixin btn-secondary() {
  background: map.get($color-palette, 'gray-100');
  color: map.get($color-palette, 'gray-700');
  border: 2px solid map.get($color-palette, 'gray-300');
  padding: map.get($spacing-map, 'xs') map.get($spacing-map, 'lg');
  border-radius: $border-radius-base;
  font-weight: 600;
  cursor: pointer;
  transition: all $transition-duration ease;

  &:hover {
    background: map.get($color-palette, 'gray-200');
    border-color: map.get($demo-colors, 'primary');
  }
}

@mixin two-column-layout() {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: map.get($spacing-map, 'lg');
}

@mixin glass-card($bg-color: rgba(255,255,255,0.1)) {
  background: $bg-color;
  backdrop-filter: blur(15px);
  border-radius: map.get($border-radius-scale, lg);
  border: 1px solid rgba(255,255,255,0.2);
}

// Form and Table mixins
@mixin progress-fill-style() {
  height: 100%;
  background: map.get($demo-gradients, 'primary-blue');
  border-radius: inherit;
  transition: width $transition-duration ease;
  position: relative;
}

@mixin table-header() {
  background: map.get($demo-colors, 'primary');
  color: white;
  
  th {
    padding: map.get($spacing-map, 'sm');
    font-weight: 700;
    text-align: left;
  }
}

@mixin table-body() {
  tr {
    &:hover {
      background: rgba(map.get($demo-colors, 'primary'), 0.05);
    }
  }
  
  td {
    padding: map.get($spacing-map, 'sm');
    border-bottom: 1px solid map.get($color-palette, 'gray-200');
  }
}

@mixin form-group() {
  margin-bottom: map.get($spacing-map, 'lg');
  
  &:last-child {
    margin-bottom: 0;
  }
}

@mixin form-input() {
  @include form-select();
  min-height: 44px;
}

@mixin form-help-text() {
  font-size: 0.875rem;
  color: map.get($color-palette, 'gray-600');
  margin-top: map.get($spacing-map, 'xs');
}

@mixin form-error-text() {
  font-size: 0.875rem;
  color: map.get($demo-colors, 'danger');
  margin-top: map.get($spacing-map, 'xs');
  font-weight: 500;
}
